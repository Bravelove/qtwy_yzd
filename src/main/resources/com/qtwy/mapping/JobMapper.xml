<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.qtwy.dao.JobMapper">
  <resultMap id="BaseResultMap" type="com.qtwy.entity.Job">

    <id column="job_id" jdbcType="INTEGER" property="jobId" />
    <result column="job_name" jdbcType="VARCHAR" property="jobName" />
    <result column="job_address" jdbcType="VARCHAR" property="jobAddress" />
    <result column="job_salary" jdbcType="DOUBLE" property="jobSalary" />
    <result column="release_time" jdbcType="DATE" property="releaseTime" />
    <result column="cid" jdbcType="VARCHAR" property="cid" />
  </resultMap>
  <sql id="Example_Where_Clause">

    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">

    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">

    job_id, job_name, job_address, job_salary, release_time, cid
  </sql>
  <select id="selectByExample" parameterType="com.qtwy.entity.JobExample" resultMap="BaseResultMap">

    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from job
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">

    select 
    <include refid="Base_Column_List" />
    from job
    where job_id = #{jobId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">

    delete from job
    where job_id = #{jobId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.qtwy.entity.JobExample">

    delete from job
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.qtwy.entity.Job">

    insert into job (job_id, job_name, job_address, 
      job_salary, release_time, cid
      )
    values (#{jobId,jdbcType=INTEGER}, #{jobName,jdbcType=VARCHAR}, #{jobAddress,jdbcType=VARCHAR}, 
      #{jobSalary,jdbcType=DOUBLE}, #{releaseTime,jdbcType=DATE}, #{cid,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.qtwy.entity.Job">

    insert into job
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="jobId != null">
        job_id,
      </if>
      <if test="jobName != null">
        job_name,
      </if>
      <if test="jobAddress != null">
        job_address,
      </if>
      <if test="jobSalary != null">
        job_salary,
      </if>
      <if test="releaseTime != null">
        release_time,
      </if>
      <if test="cid != null">
        cid,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="jobId != null">
        #{jobId,jdbcType=INTEGER},
      </if>
      <if test="jobName != null">
        #{jobName,jdbcType=VARCHAR},
      </if>
      <if test="jobAddress != null">
        #{jobAddress,jdbcType=VARCHAR},
      </if>
      <if test="jobSalary != null">
        #{jobSalary,jdbcType=DOUBLE},
      </if>
      <if test="releaseTime != null">
        #{releaseTime,jdbcType=DATE},
      </if>
      <if test="cid != null">
        #{cid,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.qtwy.entity.JobExample" resultType="java.lang.Integer">

    select count(*) from job
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">

    update job
    <set>
      <if test="record.jobId != null">
        job_id = #{record.jobId,jdbcType=INTEGER},
      </if>
      <if test="record.jobName != null">
        job_name = #{record.jobName,jdbcType=VARCHAR},
      </if>
      <if test="record.jobAddress != null">
        job_address = #{record.jobAddress,jdbcType=VARCHAR},
      </if>
      <if test="record.jobSalary != null">
        job_salary = #{record.jobSalary,jdbcType=DOUBLE},
      </if>
      <if test="record.releaseTime != null">
        release_time = #{record.releaseTime,jdbcType=DATE},
      </if>
      <if test="record.cid != null">
        cid = #{record.cid,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">

    update job
    set job_id = #{record.jobId,jdbcType=INTEGER},
      job_name = #{record.jobName,jdbcType=VARCHAR},
      job_address = #{record.jobAddress,jdbcType=VARCHAR},
      job_salary = #{record.jobSalary,jdbcType=DOUBLE},
      release_time = #{record.releaseTime,jdbcType=DATE},
      cid = #{record.cid,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.qtwy.entity.Job">

    update job
    <set>
      <if test="jobName != null">
        job_name = #{jobName,jdbcType=VARCHAR},
      </if>
      <if test="jobAddress != null">
        job_address = #{jobAddress,jdbcType=VARCHAR},
      </if>
      <if test="jobSalary != null">
        job_salary = #{jobSalary,jdbcType=DOUBLE},
      </if>
      <if test="releaseTime != null">
        release_time = #{releaseTime,jdbcType=DATE},
      </if>
      <if test="cid != null">
        cid = #{cid,jdbcType=VARCHAR},
      </if>
    </set>
    where job_id = #{jobId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.qtwy.entity.Job">

    update job
    set job_name = #{jobName,jdbcType=VARCHAR},
      job_address = #{jobAddress,jdbcType=VARCHAR},
      job_salary = #{jobSalary,jdbcType=DOUBLE},
      release_time = #{releaseTime,jdbcType=DATE},
      cid = #{cid,jdbcType=VARCHAR}
    where job_id = #{jobId,jdbcType=INTEGER}
  </update>
</mapper>